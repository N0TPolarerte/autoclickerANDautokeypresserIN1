import tkinter as tk
from tkinter import ttk, messagebox, simpledialog, Menu
import threading
import time
from pynput.mouse import Controller as MouseController, Button
from pynput.keyboard import Controller as KeyboardController, Listener, Key, KeyCode

class AutoKeyClickerApp:
    def __init__(self, master):
        self.master = master
        self.master.title("AutoKeyClicker")
        self.mouse_controller = MouseController()
        self.keyboard_controller = KeyboardController()
        self.interval = tk.DoubleVar(value=10)
        self.hotkey_clicker = KeyCode.from_char('f')
        self.hotkey_presser = KeyCode.from_char('j')
        self.running_clicker = False
        self.running_presser = False
        self.setup_ui()
        self.create_hotkey_listener()

    def setup_ui(self):
        # Style configuration
        style = ttk.Style()
        style.configure('TButton', padding=6, relief='flat', background="#DDD")
        style.configure('TLabel', background="#DDD", padding=6)
        style.configure('TRadiobutton', background="#DDD", padding=6)
        style.configure('TCheckbutton', background="#DDD", padding=6)
        style.configure('TEntry', padding=6)

        # Menu bar setup
        menu_bar = Menu(self.master)
        file_menu = Menu(menu_bar, tearoff=0)
        file_menu.add_command(label="Change Hotkey", command=self.change_hotkey)
        menu_bar.add_cascade(label="File", menu=file_menu)
        self.master.config(menu=menu_bar)

        # Interval Entry and Set Interval Button
        ttk.Label(self.master, text="Interval (ms):").pack(padx=10, pady=2)
        interval_entry = ttk.Entry(self.master, textvariable=self.interval)
        interval_entry.pack(padx=10, pady=2)
        interval_button = ttk.Button(self.master, text="Set Interval", command=self.set_interval)
        interval_button.pack(padx=10, pady=2)

        # Key Pressed Entry and Set Key Button
        ttk.Label(self.master, text="Key Pressed:").pack(padx=10, pady=2)
        key_entry = ttk.Entry(self.master)
        key_entry.pack(padx=10, pady=2)
        key_button = ttk.Button(self.master, text="Set Key", command=self.set_key)
        key_button.pack(padx=10, pady=2)

        # Mouse selection with radio buttons
        self.mouse_selection = tk.StringVar(value='left')
        mouse_frame = ttk.Frame(self.master)
        mouse_frame.pack(padx=10, pady=2)
        ttk.Radiobutton(mouse_frame, text="Left Mouse", variable=self.mouse_selection, value='left').pack(side=tk.LEFT)
        ttk.Radiobutton(mouse_frame, text="Right Mouse", variable=self.mouse_selection, value='right').pack(side=tk.LEFT)

        # Start and Stop buttons
        button_frame = ttk.Frame(self.master)
        button_frame.pack(padx=10, pady=2)
        start_button = ttk.Button(button_frame, text="Start (F3)", command=self.start_auto_clicking)
        start_button.pack(side=tk.LEFT, padx=5)
        stop_button = ttk.Button(button_frame, text="Stop (F4)", command=self.stop_auto_clicking)
        stop_button.pack(side=tk.LEFT, padx=5)

        # Confirmation checkbox
        self.confirmation_var = tk.BooleanVar(value=False)
        confirmation_check = ttk.Checkbutton(self.master, text="Enable Auto Function", variable=self.confirmation_var
, command=self.toggle_function)
confirmation_check.pack(padx=10, pady=2)
def set_interval(self):
    try:
        interval_value = float(self.interval.get())
        if interval_value <= 0:
            raise ValueError("The interval must be a positive number.")
        messagebox.showinfo("Success", f"Interval set to: {interval_value} ms")
    except ValueError as e:
        messagebox.showerror("Error", str(e))

def set_key(self):
    # Implement the functionality as needed for setting keys
    pass

def toggle_function(self):
    if self.confirmation_var.get():
        if not self.running_clicker:
            self.start_auto_clicking()
        if not self.running_presser:
            self.start_auto_pressing()
    else:
        if self.running_clicker:
            self.stop_auto_clicking()
        if self.running_presser:
            self.stop_auto_pressing()

def start_auto_clicking(self):
    self.running_clicker = True
    self.click_thread = threading.Thread(target=self.auto_click, daemon=True)
    self.click_thread.start()

def auto_click(self):
    while self.running_clicker:
        if self.mouse_selection.get() == 'left':
            self.mouse_controller.click(Button.left)
        else:
            self.mouse_controller.click(Button.right)
        time.sleep(self.interval.get() / 1000)

def stop_auto_clicking(self):
    self.running_clicker = False

def start_auto_pressing(self):
    # Implement auto key pressing logic here
    pass

def stop_auto_pressing(self):
    self.running_presser = False

def change_hotkey(self):
    new_hotkey_clicker = simpledialog.askstring("Change Hotkey", "Enter the new hotkey for clicking (e.g., 'f3'):")
    new_hotkey_presser = simpledialog.askstring("Change Hotkey", "Enter the new hotkey for pressing (e.g., 'f4'):")

    if new_hotkey_clicker and len(new_hotkey_clicker) == 1:
        self.hotkey_clicker = KeyCode.from_char(new_hotkey_clicker)
        messagebox.showinfo("Hotkey Changed", f"New hotkey for clicking set to: {new_hotkey_clicker}")

    if new_hotkey_presser and len(new_hotkey_presser) == 1:
        self.hotkey_presser = KeyCode.from_char(new_hotkey_presser)
        messagebox.showinfo("Hotkey Changed", f"New hotkey for pressing set to: {new_hotkey_presser}")

def create_hotkey_listener(self):
    def on_press(key):
        if key == self.hotkey_clicker:
            self.toggle_function()  # Toggle auto clicking
        elif key == self.hotkey_presser:
            self.toggle_function()  # Toggle auto key pressing

    self.listener = Listener(on_press=on_press)
    self.listener.start()

def on_close(self):
    self.running_clicker = False
    self.running_presser = False
    if self.listener:
        self.listener.stop()
    self.master.destroy()
# ... rest of the AutoKeyClickerApp class ...

if __name__ == "__main__":
    root = tk.Tk()
    app = AutoKeyClickerApp(root)
    root.protocol("WM_DELETE_WINDOW", app.on_close)
    root.mainloop()
